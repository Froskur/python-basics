#!/usr/bin/env python
# coding: utf-8

# #### 1. Реализовать скрипт, в котором должна быть предусмотрена функция расчёта заработной платы сотрудника. Используйте в нём формулу: (выработка в часах*ставка в час) + премия. Во время выполнения расчёта для конкретных значений необходимо запускать скрипт с параметрами.
# 

# см. файл Lesson-04-cmd.py

# #### 2. Представлен список чисел. Необходимо вывести элементы исходного списка, значения которых больше предыдущего элемента.
# Подсказка: элементы, удовлетворяющие условию, оформить в виде списка. Для его формирования используйте генератор.
# Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
# Результат: [12, 44, 4, 10, 78, 123].

# In[17]:


import random

# my_list = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]
my_list = [random.randrange(0,300) for n in range(25)]

list_result = [my_list[x] for x in range(1,len(my_list)) if my_list[x]>my_list[x-1]]

print(my_list)
print(list_result)
    


# #### 3. Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. Решите задание в одну строку.
# Подсказка: используйте функцию range() и генератор.

# In[22]:


[x for x in range(20,240) if (x % 20 == 0) | (x % 21 == 0)]


# #### 4. Представлен список чисел. Определите элементы списка, не имеющие повторений. Сформируйте итоговый массив чисел, соответствующих требованию. Элементы выведите в порядке их следования в исходном списке. Для выполнения задания обязательно используйте генератор.
# Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
# Результат: [23, 1, 3, 10, 4, 11]

# In[26]:


#my_lst2 = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
my_lst2 = [random.randrange(1,20) for n in range(50)]

list_result = [x for x in my_lst2 if my_lst2.count(x)==1]

print(my_lst2)
print(list_result)


# #### 5. Реализовать формирование списка, используя функцию range() и возможности генератора. В список должны войти чётные числа от 100 до 1000 (включая границы). Нужно получить результат вычисления произведения всех элементов списка.
# Подсказка: использовать функцию reduce().

# In[33]:


from functools import reduce

items = [x for x in range(100,1001) if (x % 2 == 0)]

result_all = reduce(lambda x,y: x * y, items)
 
print(result_all)
 


# #### 6. Реализовать два небольших скрипта:
# итератор, генерирующий целые числа, начиная с указанного;
# итератор, повторяющий элементы некоторого списка, определённого заранее. Подсказка: используйте функцию count() и cycle() модуля itertools. Обратите внимание, что создаваемый цикл не должен быть бесконечным. Предусмотрите условие его завершения. #### Например, в первом задании выводим целые числа, начиная с 3. При достижении числа 10 — завершаем цикл. Вторым пунктом необходимо предусмотреть условие, при котором повторение элементов списка прекратится.

# In[36]:


from itertools import count

for el in count(3):
    if el > 10:
        break

    print(el)


# In[55]:


from itertools import cycle
import random

#Определим максимальную длину генерируемой шестандцеричной последотвательности
base    = "ABCDEF9876543210"
max_len = 12
result  = ''

for el in cycle(base):
    if len(result) >= max_len:
        break
        
    result += el + str(base[random.randint(0,len(base)-1)])

print(result)


# #### 7. Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение. При вызове функции должен создаваться объект-генератор. Функция вызывается следующим образом: for el in fact(n). Она отвечает за получение факториала числа. В цикле нужно выводить только первые n чисел, начиная с 1! и до n!.
# Подсказка: факториал числа n — произведение чисел от 1 до n. Например, факториал четырёх 4! = 1 * 2 * 3 * 4 = 24.

# In[9]:


#Несколько путанная постановка задания на мой взгляд. Да ещё и с выводом первых n чисел. Можно подумать,
#что в факториале их может быть больше чем n 

def fact(n):
    for iteration in range(n):
        result = 1
        for el_in_n in range(iteration+1):
            result *= (el_in_n +1)

        yield result
        

n = 8    
for el in fact(n):
    print(el)

