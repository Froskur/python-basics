#!/usr/bin/env python
# coding: utf-8

# #### 1. Реализовать функцию, принимающую два числа (позиционные аргументы) и выполняющую их деление. Числа запрашивать у пользователя, предусмотреть обработку ситуации деления на ноль.

# In[12]:


def myDiv(delimoe, delitel):    
    try:
        return delimoe / delitel
    except ZeroDivisionError:
        return False
    


# In[40]:


while True:
    try:
        delimoe = int(input("Введите делимое: "))
        delitel = int(input("Введите делитель: "))
    except:
        print("Вы ввели не числа, повторите ввод")
    else:
        break
    
result = myDiv(delimoe, delitel)
if (result == False):
    print("Делитель не должен быть 0")
else:
    print(f"Результат деления {delimoe} на {delitel} = {result}")


# #### 2. Выполнить функцию, которая принимает несколько параметров, описывающих данные пользователя: имя, фамилия, год рождения, город проживания, email, телефон. Функция должна принимать параметры как именованные аргументы. Осуществить вывод данных о пользователе одной строкой.

# In[41]:


def myUnion(**kwargs):
    kwargs = {k.lower():v for k,v in kwargs.items()}
    return f"Пользователь {kwargs['firstname']} {kwargs['lastname']} (родился {kwargs['yearofbirth']} г.) из города {kwargs['city']} с контактными данными: {kwargs['phone']}, {kwargs['email']}"


# In[42]:


myUnion(firstName="Andrey", lastName="Petrov", yearOfBirth="1990", city="st. Petersburg", phone="+7 (921) 950-45-45", email="mymail@gmail.com")
    


# #### 3. Реализовать функцию my_func(), которая принимает три позиционных аргумента и возвращает сумму наибольших двух аргументов

# In[65]:


def my_func(*args):
    args = list(args)
    args.sort()
    return sum(args[-2:])


# In[67]:


my_func(16,2,9)


# #### 4. Программа принимает действительное положительное число x и целое отрицательное число y. Выполните возведение числа x в степень y. Задание реализуйте в виде функции my_func(x, y). При решении задания нужно обойтись без встроенной функции возведения числа в степень.
# Подсказка: попробуйте решить задачу двумя способами. Первый — возведение в степень с помощью оператора \*\*. Второй — более сложная реализация без оператора \*\*, предусматривающая использование цикла.

# In[80]:


def my_func_one(x,y):
    return 1/x ** abs(y)


# In[81]:


def my_func_two(x,y):
    result = 1
    for i in range(abs(y)):
        result *= x
    return 1/result


# In[83]:


while True:
    try:
        x = int(input("Введите действительное положительное число: "))
        y = int(input("Введите целое отрицательное число: "))
    except:
        print("Вы ввели не числа, повторите ввод")
    else:
        if (y >= 0):
            print("Второе число должно быть отрицательное")
        else:    
            break

print("Первый результат = " + str(my_func_one(x, y)))
print("Второй результат = " + str(my_func_one(x, y)))


# #### 5. Программа запрашивает у пользователя строку чисел, разделённых пробелом. При нажатии Enter должна выводиться сумма чисел. Пользователь может продолжить ввод чисел, разделённых пробелом и снова нажать Enter. Сумма вновь введённых чисел будет добавляться к уже подсчитанной сумме
# Но если вместо числа вводится специальный символ, выполнение программы завершается. Если специальный символ введён после нескольких чисел, то вначале нужно добавить сумму этих чисел к полученной ранее сумме и после этого завершить программу.

# In[120]:


allNumber = []
while True:
    strNumber = input("Введите несколько чисел, разделнные пробелом или n/no/нет/н для выхода: ").lower()
    
    tmpList = strNumber.split(" ")
    
    # Найем через список самое первое вхождениее нашего стоп символа 
    try:
        maxIndexForAdd = min([tmpList.index(x) for x in ['n','no','нет','н'] if tmpList.count(x)])
    except:
        maxIndexForAdd = len(tmpList)
    
    tmpList = tmpList[:maxIndexForAdd]
    
    allNumber.extend([int(x) for x in tmpList if len(x)>0])
        
    print(f'Сумма всех чисел равна {sum(allNumber)}')
    
    if tmpList != strNumber.split(" "):
        break
    


# ####  6. Реализовать функцию int_func(), принимающую слова из маленьких латинских букв и возвращающую их же, но с прописной первой буквой. Например, print(int_func(‘text’)) -> Text.

# In[137]:


def int_funct(txt):
    return " ".join([word.title() for word in txt.split(' ')])


# In[141]:


int_funct('text')


# #### 7. Продолжить работу над заданием. В программу должна попадать строка из слов, разделённых пробелом. Каждое слово состоит из латинских букв в нижнем регистре. Нужно сделать вывод исходной строки, но каждое слово должно начинаться с заглавной буквы. Используйте написанную ранее функцию int_func().

# In[142]:



int_funct('мама мыла раму, а папа чинил автомобиль')


# Будем считать что сделал так как у меня уже работает как надо для всех случаев :)
